user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

include modules-enabled/*.conf;

events {
       	worker_connections 4096;
       	# multi_accept on;
}

http {

       	##
       	# Basic Settings
       	##

       	sendfile on;
       	tcp_nopush on;
       	tcp_nodelay on;
       	keepalive_timeout 65;
       	types_hash_max_size 2048;
       	# server_tokens off;

       	server_names_hash_bucket_size 128;
       	# server_name_in_redirect off;

       	include /etc/nginx/mime.types;
       	default_type application/octet-stream;

       	##
       	# SSL Settings
       	##

       	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
       	ssl_prefer_server_ciphers on;

       	##
       	# Logging Settings
       	##

       	access_log /var/log/nginx/access.log;
       	error_log /var/log/nginx/error.log;

       	##
       	# Gzip Settings
       	##

       	gzip on;
       	gzip_disable "msie6";

       	# gzip_vary on;
       	# gzip_proxied any;
       	# gzip_comp_level 6;
       	# gzip_buffers 16 8k;
       	# gzip_http_version 1.1;
       	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        {% if nginx_lua_prometheus %}
        lua_shared_dict prometheus_metrics 10M;
        lua_package_path "/var/lib/nginx-lua-prometheus/?.lua";
        init_by_lua '
          prometheus = require("prometheus").init("prometheus_metrics")
          metric_requests = prometheus:counter(
            "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
          metric_latency = prometheus:histogram(
            "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
          metric_connections = prometheus:gauge(
            "nginx_http_connections", "Number of HTTP connections", {"state"})
        ';
        log_by_lua '
          metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
          metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
        ';

        server {
            listen 9145;
            allow 192.168.0.0/16;
            allow 172.16.0.0/16;
            allow 172.17.0.0/16;
	    allow 127.0.0.1;
            deny all;
            location /metrics {
                content_by_lua '
                  metric_connections:set(ngx.var.connections_reading, {"reading"})
                  metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                  metric_connections:set(ngx.var.connections_writing, {"writing"})
                  prometheus:collect()
                ';
            }
        }
        {% endif %}

       	##
       	# Virtual Host Configs
       	##

       	include /etc/nginx/conf.d/*.conf;
       	include /etc/nginx/sites-enabled/*;
}
